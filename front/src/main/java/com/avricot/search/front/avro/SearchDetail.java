/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.avricot.search.front.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SearchDetail extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1842110452712938676L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SearchDetail\",\"namespace\":\"com.avricot.search.front.avro\",\"fields\":[{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"searchType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"searchTime\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String clientId;
  @Deprecated public java.lang.String searchType;
  @Deprecated public long searchTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SearchDetail() {}

  /**
   * All-args constructor.
   */
  public SearchDetail(java.lang.String clientId, java.lang.String searchType, java.lang.Long searchTime) {
    this.clientId = clientId;
    this.searchType = searchType;
    this.searchTime = searchTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return clientId;
    case 1: return searchType;
    case 2: return searchTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: clientId = (java.lang.String)value$; break;
    case 1: searchType = (java.lang.String)value$; break;
    case 2: searchTime = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'clientId' field.
   */
  public java.lang.String getClientId() {
    return clientId;
  }

  /**
   * Sets the value of the 'clientId' field.
   * @param value the value to set.
   */
  public void setClientId(java.lang.String value) {
    this.clientId = value;
  }

  /**
   * Gets the value of the 'searchType' field.
   */
  public java.lang.String getSearchType() {
    return searchType;
  }

  /**
   * Sets the value of the 'searchType' field.
   * @param value the value to set.
   */
  public void setSearchType(java.lang.String value) {
    this.searchType = value;
  }

  /**
   * Gets the value of the 'searchTime' field.
   */
  public java.lang.Long getSearchTime() {
    return searchTime;
  }

  /**
   * Sets the value of the 'searchTime' field.
   * @param value the value to set.
   */
  public void setSearchTime(java.lang.Long value) {
    this.searchTime = value;
  }

  /**
   * Creates a new SearchDetail RecordBuilder.
   * @return A new SearchDetail RecordBuilder
   */
  public static com.avricot.search.front.avro.SearchDetail.Builder newBuilder() {
    return new com.avricot.search.front.avro.SearchDetail.Builder();
  }
  
  /**
   * Creates a new SearchDetail RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SearchDetail RecordBuilder
   */
  public static com.avricot.search.front.avro.SearchDetail.Builder newBuilder(com.avricot.search.front.avro.SearchDetail.Builder other) {
    return new com.avricot.search.front.avro.SearchDetail.Builder(other);
  }
  
  /**
   * Creates a new SearchDetail RecordBuilder by copying an existing SearchDetail instance.
   * @param other The existing instance to copy.
   * @return A new SearchDetail RecordBuilder
   */
  public static com.avricot.search.front.avro.SearchDetail.Builder newBuilder(com.avricot.search.front.avro.SearchDetail other) {
    return new com.avricot.search.front.avro.SearchDetail.Builder(other);
  }
  
  /**
   * RecordBuilder for SearchDetail instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SearchDetail>
    implements org.apache.avro.data.RecordBuilder<SearchDetail> {

    private java.lang.String clientId;
    private java.lang.String searchType;
    private long searchTime;

    /** Creates a new Builder */
    private Builder() {
      super(com.avricot.search.front.avro.SearchDetail.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.avricot.search.front.avro.SearchDetail.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.clientId)) {
        this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.searchType)) {
        this.searchType = data().deepCopy(fields()[1].schema(), other.searchType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.searchTime)) {
        this.searchTime = data().deepCopy(fields()[2].schema(), other.searchTime);
        fieldSetFlags()[2] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing SearchDetail instance
     * @param other The existing instance to copy.
     */
    private Builder(com.avricot.search.front.avro.SearchDetail other) {
            super(com.avricot.search.front.avro.SearchDetail.SCHEMA$);
      if (isValidValue(fields()[0], other.clientId)) {
        this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.searchType)) {
        this.searchType = data().deepCopy(fields()[1].schema(), other.searchType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.searchTime)) {
        this.searchTime = data().deepCopy(fields()[2].schema(), other.searchTime);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'clientId' field.
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }

    /**
      * Sets the value of the 'clientId' field.
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public com.avricot.search.front.avro.SearchDetail.Builder setClientId(java.lang.String value) {
      validate(fields()[0], value);
      this.clientId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'clientId' field.
      * @return This builder.
      */
    public com.avricot.search.front.avro.SearchDetail.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'searchType' field.
      * @return The value.
      */
    public java.lang.String getSearchType() {
      return searchType;
    }

    /**
      * Sets the value of the 'searchType' field.
      * @param value The value of 'searchType'.
      * @return This builder.
      */
    public com.avricot.search.front.avro.SearchDetail.Builder setSearchType(java.lang.String value) {
      validate(fields()[1], value);
      this.searchType = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'searchType' field has been set.
      * @return True if the 'searchType' field has been set, false otherwise.
      */
    public boolean hasSearchType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'searchType' field.
      * @return This builder.
      */
    public com.avricot.search.front.avro.SearchDetail.Builder clearSearchType() {
      searchType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'searchTime' field.
      * @return The value.
      */
    public java.lang.Long getSearchTime() {
      return searchTime;
    }

    /**
      * Sets the value of the 'searchTime' field.
      * @param value The value of 'searchTime'.
      * @return This builder.
      */
    public com.avricot.search.front.avro.SearchDetail.Builder setSearchTime(long value) {
      validate(fields()[2], value);
      this.searchTime = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'searchTime' field has been set.
      * @return True if the 'searchTime' field has been set, false otherwise.
      */
    public boolean hasSearchTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'searchTime' field.
      * @return This builder.
      */
    public com.avricot.search.front.avro.SearchDetail.Builder clearSearchTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public SearchDetail build() {
      try {
        SearchDetail record = new SearchDetail();
        record.clientId = fieldSetFlags()[0] ? this.clientId : (java.lang.String) defaultValue(fields()[0]);
        record.searchType = fieldSetFlags()[1] ? this.searchType : (java.lang.String) defaultValue(fields()[1]);
        record.searchTime = fieldSetFlags()[2] ? this.searchTime : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
